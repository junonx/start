# ================================================================
# BGScript demo: Factory demo script
# ----------------------------------------------------------------
# CHANGELOG:
#   
# ================================================================
#
# LED0 is mapped to pin F6
const led0      = 5
const led0_mask  = $40
# LED2 is mapped to pin F4
const led2      = 5
const led2_mask  = $10
# LED3 is mapped to pin A1
const led3      = 0
const led3_mask  = $02
 


# Variable definitions
dim tmp(5)
dim level
#dim value_len
#dim value_data
 
# ADVertizement data
dim advdata(30)
dim r
dim timer
dim gpio_val
dim accm_samples(5)

dim ticker
dim connected

# Import Peripheral library
import "peripheral.bgs" 

# Boot event listener - Generated when the module is started
event system_boot(major,minor,patch,build,bootloader,hw)
    
	
	# Timer is not running
	timer = 0

	# Initialize hardware GPIOs
	call init()
	
	# BK 0601 TURN ON LED3(PA1)
	call hardware_write_gpio(led3,led3_mask,$00)
	# BK 0601 TURN ON LED2(PF4)	
	call hardware_write_gpio(led2,led2_mask,$00)
	
	gpio_val = $0
	
	# Initialize Beacon ADV data
	advdata(0:1) = $02 # Length of the Flags field - 2 bytes-  
	advdata(1:1) = $01 # Type of the Flags field.
	advdata(2:1) = $06 # LE and BR/EDR flag - Flags field.
	advdata(3:1) = $1a # Length of the Manufacturer Data field - 26 bytes - 
	advdata(4:1) = $ff # Data type - manufacturer specific data - Type of the Manufacturer Data field.
	advdata(5:1) = $ff # Manufacturer data, Company ID field
	advdata(6:1) = $ff # Manufacturer data, Company ID field
	advdata(7:1) = $02 # Manufacturer data, Beacon Type field
	advdata(8:1) = $15 # Manufacturer data, Beacon Type field
	
	# Apple AirLocate Service UUID: feedabba-dead-beef-feed-abbadeadbeef -128-bit Universally Unique Identifier.
	advdata(9:1) = $fe
	advdata(10:1) = $ed
	advdata(11:1) = $ab
	advdata(12:1) = $ba
	advdata(13:1) = $de
	advdata(14:1) = $ad
	advdata(15:1) = $be
	advdata(16:1) = $ef
	advdata(17:1) = $fe
	advdata(18:1) = $ed
	advdata(19:1) = $ab
	advdata(20:1) = $ba
	advdata(21:1) = $de
	advdata(22:1) = $ad
	advdata(23:1) = $be
	advdata(24:1) = $ef
		
	# Major : 88 ab  -Beacon major number.
	advdata(25:1) = $ab
	advdata(26:1) = $88
	
	# Minor: 04 01  -Beacon minor number.
	advdata(27:1) = $01
	advdata(28:1) = $04
	
	# Signal power (calibrated RSSI) -The Beacon's measured RSSI at 1 meter distance in dBm.
	advdata(29:1) = $c3
	
	# Set advertisement interval to 1000ms, use all three advertisement channels
	call le_gap_set_adv_parameters(1600,1600,7)
	
	# Read GPIO status (Button PB1)
	call hardware_read_gpio(5,$80)(r,data)
	
	# check GPIO status
	if(data)
		# Start normal BLE advertisements and enable connections
		call le_gap_set_mode(2,2)
	else
		# pB1 button was pressed during boot- start beacon BLE advertisements and enable connections
		call le_gap_set_adv_data(0, 30, advdata(0:30))
		call le_gap_set_mode(4,2)		
	end if
	
	
end 

# Generated when GATT characteristic client configuration value is changed
event gatt_server_characteristic_status(connection,characteristic,status_flags,client_config_flags) 
	
	# BK 0601 TURN OFF LED3(PA1)
	call hardware_write_gpio(led3,led3_mask,led3_mask)
	
	
	# Check if indications have been enabled for HTM temperature measurement and that timer is not running
	if (characteristic = xgatt_temperature_celsius) && (status_flags = 1) && (client_config_flags = 2) && (timer = 0) then
		# Indications were enabled - set software timer to tick each second
		call hardware_set_soft_timer(4096,0,0)
		timer = 1
	end if
	
	# Check if indications have been disabled for HTM temperature measurement
	if (characteristic = xgatt_temperature_celsius) && (status_flags = 1) && (client_config_flags = 0) then
		# Indications were disabled - stop software timer
		# hardware_set_soft_timer(time,handle,single_shot)(result)
		
		call hardware_set_soft_timer(0,0,0)
		timer = 0 
	end if
	
	# check if indications have been enabled for gpio_control
	if	(characteristic = gpio_control)
		call hardware_set_soft_timer(32768,1,0)
	end if
	
end 

# This event is generated when the local data base values are changed by GATT client 
event gatt_server_attribute_value(connection,characteristic,att_opcode,offset,value_le,value)
	
	# BK 0601 TURN OFF LED2(PF4)	
	call hardware_write_gpio(led2,led2_mask,led2_mask)
	
	# if changed attribute is Find Me / Alert Level
	if characteristic = xgatt_alert then
		level=value(0:1)
		if level=0 then
			#if no alert - turn off led
			call hardware_write_gpio(5,$40,$40)
			call hardware_write_gpio(5,$10,$10)
		end if
		if	level=1 then
			#if mild alert - turn on led
			#call hardware_write_gpio(5,$40,$00)
			call hardware_write_gpio(5,$10,$00)
		end if
		if level=2 then
			#if high alert - turn on led
			call hardware_write_gpio(5,$40,$00)
		end if
	end if
	
	
end

# Software timer event - generated when software timer runs out
event hardware_soft_timer(handle)

	# ticker runs from 0..9 
    if ticker < 9 then
        ticker = ticker + 1
    else
        ticker = 0
    end if
    
    # -- LED blinking: select pattern depending on connection status ---
    if connected = 0 then 
        # no connection -> drive LED using a "heart-beat" pattern: ON when ticker = 0 or 2, otherwise OFF
        if ticker = 0 || ticker = 2  then
            call hardware_write_gpio(led0, led0_mask, $00) #led on
        else
            call hardware_write_gpio(led0, led0_mask, led0_mask) #led off
        end if
    
    else
        # connected -> blink fast
        if (ticker & 1) then                
            call hardware_write_gpio(led0, led0_mask, $00) #led on
        else
            call hardware_write_gpio(led0, led0_mask, led0_mask) #led off
        end if
        
    end if 
	


	if handle = 0 then
		# Read temperature from the RHT sensor
		# After using this procedure, exported variable "data" will carry the temperature value and "len" length of the value 
		call read_i2c()
		
		# Build HTM service's temperature reading characteristic
		# Set flags for Celsius temperature
		tmp(0:1)=0
		# Convert the value to float
		tmp(1:4)=float(data*1757/65536-469, -1)
		
		# Write attribute to local GATT data base Temperature Measurement attribute
		call gatt_server_write_attribute_value(xgatt_temperature_celsius,0,5,tmp(0:5))(result)
		
		# Send indication to all "listening" clients 
		# 0xFF as connection ID will send indications to all connections
		call gatt_server_send_characteristic_notification($ff, xgatt_temperature_celsius,5,tmp(0:5))(result)
		#call gatt_server_send_characteristic_notification($ff, accm_data, 5, tmp(0:5))		
	end if
	
	if handle = 1 then
		call read_i2c_RH()
		# Set flags for RH
		tmp(0:1)=0
		# Convert the value to float
		tmp(1:4)=float(data*125/65536-6, 0)
		#accm_samples(0:5) = tmp(0:5)
		gpio_val = gpio_val + $1
		
		 #call gatt_server_write_attribute_value(gpio_control,0,1,gpio_val)(result)
		
		call gatt_server_send_characteristic_notification($ff, gpio_control,1,gpio_val)(result)
		call gatt_server_send_characteristic_notification($ff, accm_data, 5, accm_samples(0:5))		
	end if
	
end


event gatt_server_user_write_request(connection, characteristic, att_opcode, offset, value_len, value_data)
	
    if characteristic = gpio_control then
		gpio_val = value_data(0:1)
		if gpio_val = $01 then
			call hardware_write_gpio(led0,led0_mask, $00)
			accm_samples(0:1) = $e1 
			accm_samples(1:1) = $e2 
			accm_samples(2:1) = $e3		
		end if
		if gpio_val = $02 then	
			call hardware_write_gpio(led2,led2_mask,$00)
			accm_samples(0:1) = $e4 
			accm_samples(1:1) = $e5 
			accm_samples(2:1) = $e6 
		end if
		if gpio_val = $00 then
			call hardware_write_gpio(led0,led0_mask,led0_mask)
			call hardware_write_gpio(led2,led2_mask,led2_mask)
			accm_samples(0:1) = $01 
			accm_samples(1:1) = $23 
			accm_samples(2:1) = $45 
		end if				
	#gpio_val = gpio_val + $10			
	end if 
    call gatt_server_send_characteristic_notification($ff, accm_data, 5, accm_samples(0:5))	    
end 


# Disconnect event listener - generated when BLE connection is closed
event le_connection_closed(reason,connection)

	# Restart advertisement
	call le_gap_set_mode(2,2)
	
	#if no alert - turn off led
	call hardware_write_gpio(led0,led0_mask, led0_mask)
	call hardware_write_gpio(led3,led3_mask, led3_mask)
	call hardware_write_gpio(led2,led2_mask, led2_mask)
	
	# Stop software timer, since none is listening for the indications
	call hardware_set_soft_timer(0,0,0)
	call hardware_set_soft_timer(0,1,0)	
	timer = 0
end

